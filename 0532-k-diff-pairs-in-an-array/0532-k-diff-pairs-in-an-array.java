class Solution {
    public int findPairs(int[] nums, int k) {
        int count = 0;  // variable to store count...
        Set<int[]> uniquePairs = new HashSet<int[]>();  // Set to store unique entries...
        for(int i = 0; i < nums.length; i++) {
            for(int j = i+1; j < nums.length; j++) {
                if(Math.abs(nums[i]-nums[j]) == k && isUnique(uniquePairs, nums[i], nums[j])) {
                    count++;    // When both constraints are satisfied...
                    uniquePairs.add(new int[]{nums[i], nums[j]});   // Adding the new pair...
                }
            }
        }
        return count;   // Returning the count of k-diff pairs...
    }
    public boolean isUnique(Set<int[]> set, int num1, int num2)
    {
        for(int[] item : set) {     // Traversing the set...
            if(item[0] == num1 && item[1] == num2)  // If the new entry is not unique...
                return false;
            else if(item[0] == num2 && item[1] == num1)     // If not unique entry...
                return false;
        }
        return true;        // Otherwise it is unique...
    }
}